// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/r-moraru/tema-TSS/network/rpc_network/proto"
)

// RpcNetworkClient is an autogenerated mock type for the RpcNetworkClient type
type RpcNetworkClient struct {
	mock.Mock
}

type RpcNetworkClient_Expecter struct {
	mock *mock.Mock
}

func (_m *RpcNetworkClient) EXPECT() *RpcNetworkClient_Expecter {
	return &RpcNetworkClient_Expecter{mock: &_m.Mock}
}

// GetBlockchain provides a mock function with given fields: ctx, in, opts
func (_m *RpcNetworkClient) GetBlockchain(ctx context.Context, in *proto.GetBlockchainMessage, opts ...grpc.CallOption) (*proto.GetBlockchainResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockchain")
	}

	var r0 *proto.GetBlockchainResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetBlockchainMessage, ...grpc.CallOption) (*proto.GetBlockchainResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetBlockchainMessage, ...grpc.CallOption) *proto.GetBlockchainResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetBlockchainResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetBlockchainMessage, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RpcNetworkClient_GetBlockchain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockchain'
type RpcNetworkClient_GetBlockchain_Call struct {
	*mock.Call
}

// GetBlockchain is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetBlockchainMessage
//   - opts ...grpc.CallOption
func (_e *RpcNetworkClient_Expecter) GetBlockchain(ctx interface{}, in interface{}, opts ...interface{}) *RpcNetworkClient_GetBlockchain_Call {
	return &RpcNetworkClient_GetBlockchain_Call{Call: _e.mock.On("GetBlockchain",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RpcNetworkClient_GetBlockchain_Call) Run(run func(ctx context.Context, in *proto.GetBlockchainMessage, opts ...grpc.CallOption)) *RpcNetworkClient_GetBlockchain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.GetBlockchainMessage), variadicArgs...)
	})
	return _c
}

func (_c *RpcNetworkClient_GetBlockchain_Call) Return(_a0 *proto.GetBlockchainResponse, _a1 error) *RpcNetworkClient_GetBlockchain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RpcNetworkClient_GetBlockchain_Call) RunAndReturn(run func(context.Context, *proto.GetBlockchainMessage, ...grpc.CallOption) (*proto.GetBlockchainResponse, error)) *RpcNetworkClient_GetBlockchain_Call {
	_c.Call.Return(run)
	return _c
}

// SendBlock provides a mock function with given fields: ctx, in, opts
func (_m *RpcNetworkClient) SendBlock(ctx context.Context, in *proto.Block, opts ...grpc.CallOption) (*proto.SendBlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendBlock")
	}

	var r0 *proto.SendBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Block, ...grpc.CallOption) (*proto.SendBlockResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Block, ...grpc.CallOption) *proto.SendBlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SendBlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Block, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RpcNetworkClient_SendBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendBlock'
type RpcNetworkClient_SendBlock_Call struct {
	*mock.Call
}

// SendBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.Block
//   - opts ...grpc.CallOption
func (_e *RpcNetworkClient_Expecter) SendBlock(ctx interface{}, in interface{}, opts ...interface{}) *RpcNetworkClient_SendBlock_Call {
	return &RpcNetworkClient_SendBlock_Call{Call: _e.mock.On("SendBlock",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RpcNetworkClient_SendBlock_Call) Run(run func(ctx context.Context, in *proto.Block, opts ...grpc.CallOption)) *RpcNetworkClient_SendBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.Block), variadicArgs...)
	})
	return _c
}

func (_c *RpcNetworkClient_SendBlock_Call) Return(_a0 *proto.SendBlockResponse, _a1 error) *RpcNetworkClient_SendBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RpcNetworkClient_SendBlock_Call) RunAndReturn(run func(context.Context, *proto.Block, ...grpc.CallOption) (*proto.SendBlockResponse, error)) *RpcNetworkClient_SendBlock_Call {
	_c.Call.Return(run)
	return _c
}

// SendBlockchain provides a mock function with given fields: ctx, in, opts
func (_m *RpcNetworkClient) SendBlockchain(ctx context.Context, in *proto.Blockchain, opts ...grpc.CallOption) (*proto.SendBlockchainResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendBlockchain")
	}

	var r0 *proto.SendBlockchainResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Blockchain, ...grpc.CallOption) (*proto.SendBlockchainResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Blockchain, ...grpc.CallOption) *proto.SendBlockchainResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SendBlockchainResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Blockchain, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RpcNetworkClient_SendBlockchain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendBlockchain'
type RpcNetworkClient_SendBlockchain_Call struct {
	*mock.Call
}

// SendBlockchain is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.Blockchain
//   - opts ...grpc.CallOption
func (_e *RpcNetworkClient_Expecter) SendBlockchain(ctx interface{}, in interface{}, opts ...interface{}) *RpcNetworkClient_SendBlockchain_Call {
	return &RpcNetworkClient_SendBlockchain_Call{Call: _e.mock.On("SendBlockchain",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RpcNetworkClient_SendBlockchain_Call) Run(run func(ctx context.Context, in *proto.Blockchain, opts ...grpc.CallOption)) *RpcNetworkClient_SendBlockchain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.Blockchain), variadicArgs...)
	})
	return _c
}

func (_c *RpcNetworkClient_SendBlockchain_Call) Return(_a0 *proto.SendBlockchainResponse, _a1 error) *RpcNetworkClient_SendBlockchain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RpcNetworkClient_SendBlockchain_Call) RunAndReturn(run func(context.Context, *proto.Blockchain, ...grpc.CallOption) (*proto.SendBlockchainResponse, error)) *RpcNetworkClient_SendBlockchain_Call {
	_c.Call.Return(run)
	return _c
}

// SendData provides a mock function with given fields: ctx, in, opts
func (_m *RpcNetworkClient) SendData(ctx context.Context, in *proto.Data, opts ...grpc.CallOption) (*proto.SendDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendData")
	}

	var r0 *proto.SendDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Data, ...grpc.CallOption) (*proto.SendDataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Data, ...grpc.CallOption) *proto.SendDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SendDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Data, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RpcNetworkClient_SendData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendData'
type RpcNetworkClient_SendData_Call struct {
	*mock.Call
}

// SendData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.Data
//   - opts ...grpc.CallOption
func (_e *RpcNetworkClient_Expecter) SendData(ctx interface{}, in interface{}, opts ...interface{}) *RpcNetworkClient_SendData_Call {
	return &RpcNetworkClient_SendData_Call{Call: _e.mock.On("SendData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RpcNetworkClient_SendData_Call) Run(run func(ctx context.Context, in *proto.Data, opts ...grpc.CallOption)) *RpcNetworkClient_SendData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.Data), variadicArgs...)
	})
	return _c
}

func (_c *RpcNetworkClient_SendData_Call) Return(_a0 *proto.SendDataResponse, _a1 error) *RpcNetworkClient_SendData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RpcNetworkClient_SendData_Call) RunAndReturn(run func(context.Context, *proto.Data, ...grpc.CallOption) (*proto.SendDataResponse, error)) *RpcNetworkClient_SendData_Call {
	_c.Call.Return(run)
	return _c
}

// NewRpcNetworkClient creates a new instance of RpcNetworkClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRpcNetworkClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RpcNetworkClient {
	mock := &RpcNetworkClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
