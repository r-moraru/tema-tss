// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	block "github.com/r-moraru/tema-TSS/block"
	blockchain "github.com/r-moraru/tema-TSS/blockchain"

	mock "github.com/stretchr/testify/mock"
)

// Network is an autogenerated mock type for the Network type
type Network struct {
	mock.Mock
}

type Network_Expecter struct {
	mock *mock.Mock
}

func (_m *Network) EXPECT() *Network_Expecter {
	return &Network_Expecter{mock: &_m.Mock}
}

// BlockchainRequest provides a mock function with given fields:
func (_m *Network) BlockchainRequest() chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockchainRequest")
	}

	var r0 chan struct{}
	if rf, ok := ret.Get(0).(func() chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan struct{})
		}
	}

	return r0
}

// Network_BlockchainRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockchainRequest'
type Network_BlockchainRequest_Call struct {
	*mock.Call
}

// BlockchainRequest is a helper method to define mock.On call
func (_e *Network_Expecter) BlockchainRequest() *Network_BlockchainRequest_Call {
	return &Network_BlockchainRequest_Call{Call: _e.mock.On("BlockchainRequest")}
}

func (_c *Network_BlockchainRequest_Call) Run(run func()) *Network_BlockchainRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Network_BlockchainRequest_Call) Return(_a0 chan struct{}) *Network_BlockchainRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Network_BlockchainRequest_Call) RunAndReturn(run func() chan struct{}) *Network_BlockchainRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlock provides a mock function with given fields: _a0
func (_m *Network) GetBlock(_a0 string) chan block.Block {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetBlock")
	}

	var r0 chan block.Block
	if rf, ok := ret.Get(0).(func(string) chan block.Block); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan block.Block)
		}
	}

	return r0
}

// Network_GetBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlock'
type Network_GetBlock_Call struct {
	*mock.Call
}

// GetBlock is a helper method to define mock.On call
//   - _a0 string
func (_e *Network_Expecter) GetBlock(_a0 interface{}) *Network_GetBlock_Call {
	return &Network_GetBlock_Call{Call: _e.mock.On("GetBlock", _a0)}
}

func (_c *Network_GetBlock_Call) Run(run func(_a0 string)) *Network_GetBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Network_GetBlock_Call) Return(_a0 chan block.Block) *Network_GetBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Network_GetBlock_Call) RunAndReturn(run func(string) chan block.Block) *Network_GetBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockchain provides a mock function with given fields:
func (_m *Network) GetBlockchain() chan blockchain.Blockchain {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlockchain")
	}

	var r0 chan blockchain.Blockchain
	if rf, ok := ret.Get(0).(func() chan blockchain.Blockchain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan blockchain.Blockchain)
		}
	}

	return r0
}

// Network_GetBlockchain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockchain'
type Network_GetBlockchain_Call struct {
	*mock.Call
}

// GetBlockchain is a helper method to define mock.On call
func (_e *Network_Expecter) GetBlockchain() *Network_GetBlockchain_Call {
	return &Network_GetBlockchain_Call{Call: _e.mock.On("GetBlockchain")}
}

func (_c *Network_GetBlockchain_Call) Run(run func()) *Network_GetBlockchain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Network_GetBlockchain_Call) Return(_a0 chan blockchain.Blockchain) *Network_GetBlockchain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Network_GetBlockchain_Call) RunAndReturn(run func() chan blockchain.Blockchain) *Network_GetBlockchain_Call {
	_c.Call.Return(run)
	return _c
}

// GetData provides a mock function with given fields:
func (_m *Network) GetData() chan string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 chan string
	if rf, ok := ret.Get(0).(func() chan string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan string)
		}
	}

	return r0
}

// Network_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type Network_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
func (_e *Network_Expecter) GetData() *Network_GetData_Call {
	return &Network_GetData_Call{Call: _e.mock.On("GetData")}
}

func (_c *Network_GetData_Call) Run(run func()) *Network_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Network_GetData_Call) Return(_a0 chan string) *Network_GetData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Network_GetData_Call) RunAndReturn(run func() chan string) *Network_GetData_Call {
	_c.Call.Return(run)
	return _c
}

// SendBlock provides a mock function with given fields: _a0
func (_m *Network) SendBlock(_a0 block.Block) {
	_m.Called(_a0)
}

// Network_SendBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendBlock'
type Network_SendBlock_Call struct {
	*mock.Call
}

// SendBlock is a helper method to define mock.On call
//   - _a0 block.Block
func (_e *Network_Expecter) SendBlock(_a0 interface{}) *Network_SendBlock_Call {
	return &Network_SendBlock_Call{Call: _e.mock.On("SendBlock", _a0)}
}

func (_c *Network_SendBlock_Call) Run(run func(_a0 block.Block)) *Network_SendBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(block.Block))
	})
	return _c
}

func (_c *Network_SendBlock_Call) Return() *Network_SendBlock_Call {
	_c.Call.Return()
	return _c
}

func (_c *Network_SendBlock_Call) RunAndReturn(run func(block.Block)) *Network_SendBlock_Call {
	_c.Call.Return(run)
	return _c
}

// SendBlockchain provides a mock function with given fields: _a0
func (_m *Network) SendBlockchain(_a0 blockchain.Blockchain) {
	_m.Called(_a0)
}

// Network_SendBlockchain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendBlockchain'
type Network_SendBlockchain_Call struct {
	*mock.Call
}

// SendBlockchain is a helper method to define mock.On call
//   - _a0 blockchain.Blockchain
func (_e *Network_Expecter) SendBlockchain(_a0 interface{}) *Network_SendBlockchain_Call {
	return &Network_SendBlockchain_Call{Call: _e.mock.On("SendBlockchain", _a0)}
}

func (_c *Network_SendBlockchain_Call) Run(run func(_a0 blockchain.Blockchain)) *Network_SendBlockchain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(blockchain.Blockchain))
	})
	return _c
}

func (_c *Network_SendBlockchain_Call) Return() *Network_SendBlockchain_Call {
	_c.Call.Return()
	return _c
}

func (_c *Network_SendBlockchain_Call) RunAndReturn(run func(blockchain.Blockchain)) *Network_SendBlockchain_Call {
	_c.Call.Return(run)
	return _c
}

// SendBlockchainRequest provides a mock function with given fields:
func (_m *Network) SendBlockchainRequest() {
	_m.Called()
}

// Network_SendBlockchainRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendBlockchainRequest'
type Network_SendBlockchainRequest_Call struct {
	*mock.Call
}

// SendBlockchainRequest is a helper method to define mock.On call
func (_e *Network_Expecter) SendBlockchainRequest() *Network_SendBlockchainRequest_Call {
	return &Network_SendBlockchainRequest_Call{Call: _e.mock.On("SendBlockchainRequest")}
}

func (_c *Network_SendBlockchainRequest_Call) Run(run func()) *Network_SendBlockchainRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Network_SendBlockchainRequest_Call) Return() *Network_SendBlockchainRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *Network_SendBlockchainRequest_Call) RunAndReturn(run func()) *Network_SendBlockchainRequest_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *Network) Stop() {
	_m.Called()
}

// Network_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Network_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Network_Expecter) Stop() *Network_Stop_Call {
	return &Network_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Network_Stop_Call) Run(run func()) *Network_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Network_Stop_Call) Return() *Network_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *Network_Stop_Call) RunAndReturn(run func()) *Network_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewNetwork creates a new instance of Network. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNetwork(t interface {
	mock.TestingT
	Cleanup(func())
}) *Network {
	mock := &Network{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
